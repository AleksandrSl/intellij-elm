{
    generate = [ psi = "no" ]
    psiClassPrefix="Elm"
    parserClass="org.elm.lang.core.parser.ElmParser"
    elementTypeHolderClass="org.elm.lang.core.psi.ElmTypes"
    parserUtilClass="org.elm.lang.core.parser.manual.ElmParserUtil"
    elementTypeClass="org.elm.lang.core.psi.ElmElementType"
    tokenTypeClass="org.elm.lang.core.psi.ElmTokenType"

    elementTypeFactory("ModuleDeclaration")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("TypeDeclaration")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("TypeAliasDeclaration")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("UnionMember")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("FunctionDeclarationLeft")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("OperatorDeclarationLeft")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("ExposingList")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("ExposedOperator")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("ExposedValue")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("ExposedType")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("ExposedUnionConstructor")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("ExposedUnionConstructors")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("ValueDeclaration")="org.elm.lang.core.stubs.StubImplementationsKt.factory"
    elementTypeFactory("PortAnnotation")="org.elm.lang.core.stubs.StubImplementationsKt.factory"

    tokens = [
        // tokens used by manual/external parse rules
        UPPER_CASE_QID='UPPER_CASE_QID'
        VALUE_QID='VALUE_QID'
        FIELD_ACCESS='FIELD_ACCESS'
        FIELD_ACCESSOR_FUNCTION='FIELD_ACCESSOR_FUNCTION'
        DOT='DOT'
        EFFECT='EFFECT'

        // tokens used by the lexer but not visible to PsiBuilder parser
        // TODO [kl] cleanup the mess of 'comment' tokens
        RESERVED='RESERVED'
        LINE_COMMENT='LINE_COMMENT'
        START_COMMENT='START_COMMENT'
        START_DOC_COMMENT='START_DOC_COMMENT'
        COMMENT_CONTENT='COMMENT_CONTENT'
        END_COMMENT='END_COMMENT'
        NEWLINE='NEWLINE'
        TAB='TAB'
    ]
}

/*
OVERVIEW
========
This BNF grammar is interpreted by GrammarKit to produce a parser. Normally GrammarKit
will also generate the `PsiElement`s along with the grammar, but this leads to an explosion
of interfaces, implementation classes and convoluted inheritance. So instead we configure
GrammarKit to only generate 2 things:

- the parser (gen/org/elm/lang/core/parser/ElmParser.java)
- the element types (gen/org/elm/lang/core/psi/ElmTypes.java)

The actual PsiElement sub-classes which correspond to non-private grammar rules in this
BNF are created and maintained by hand. The upside of this is that you can freely modify
those PsiElement classes to implement additional interfaces, add helper methods and add
doc comments. The downside is that they must be kept in-sync with the parser (and thereby
this file).

Each non-private rule corresponds to a PsiElement subclass of the same name prefixed by
`Elm`. For instance, the `ModuleDeclaration` rule corresponds to the `ElmModuleDeclaration`
PsiElement subclass.

CODE FORMATTING
===============
- tokens are in ALL_CAPS
- grammar rules are in CamelCase
- meta rules and recoverWhile predicates should be in snake_case
 */


ElmFile ::= [ModuleDeclaration] Body

ModuleDeclaration ::= [ Effect | PORT ] MODULE UpperCaseQID [ WHERE Record ] ExposingList
    { pin = 3 }

private Body ::= ImportClauses TopDeclarations VIRTUAL_END_SECTION?

private ImportClauses ::= <<decls ImportClause>>

private TopDeclarations ::= <<decls Declaration>>



// MODULE DECLARATION


ExposingList ::= EXPOSING LEFT_PARENTHESIS (DOUBLE_DOT | ListOfValues) RIGHT_PARENTHESIS

private ListOfValues ::= <<non_empty_list ExposedItem>>

private ExposedItem ::=
    ExposedValue
    | ExposedType
    | ExposedOperator

ExposedValue ::= LOWER_CASE_IDENTIFIER

ExposedType ::=
    UPPER_CASE_IDENTIFIER [ExposedUnionConstructors]

ExposedUnionConstructors ::=
    LEFT_PARENTHESIS (DOUBLE_DOT | (<<non_empty_list ExposedUnionConstructor>>)) RIGHT_PARENTHESIS

ExposedUnionConstructor ::=
    UPPER_CASE_IDENTIFIER

ExposedOperator ::=
    OperatorAsFunction_inner


// IMPORT DECLARATION


ImportClause ::= IMPORT UpperCaseQID [AsClause] [ExposingList]
    { pin = 2 }

AsClause ::= AS UPPER_CASE_IDENTIFIER



// TOP-LEVEL DECLARATIONS


private Declaration ::=
    ValueDeclaration
    | TypeAliasDeclaration
    | TypeDeclaration
    | TypeAnnotation
    | PortAnnotation
    | OperatorConfig
    { recoverWhile = declaration_recover }

private declaration_recover ::= !(VIRTUAL_END_DECL|VIRTUAL_END_SECTION)

ValueDeclaration ::= InternalValueDeclarationLeft EQ Expression
    { pin = 'EQ' }

private InternalValueDeclarationLeft ::=
    FunctionDeclarationLeft
    | OperatorDeclarationLeft
    | Pattern

FunctionDeclarationLeft ::=
    LOWER_CASE_IDENTIFIER Pattern*

OperatorDeclarationLeft ::=
    OperatorAsFunction_inner Pattern*



// TYPE DECLARATIONS AND REFERENCES


TypeDeclaration ::=
    TYPE UPPER_CASE_IDENTIFIER (LowerTypeName)* EQ UnionMember (PIPE UnionMember)*
    { pin = 2 }

LowerTypeName ::= LOWER_CASE_IDENTIFIER

UnionMember ::=
    UPPER_CASE_IDENTIFIER SingleTypeRef*


TypeAliasDeclaration ::=
    TYPE ALIAS UPPER_CASE_IDENTIFIER LowerTypeName* EQ TypeRef
    { pin = 3 }

TypeRef ::=
    TypeRefInner (ARROW TypeRefInner)*

private TypeRefInner ::=
    ParametricTypeRef
    | SingleTypeRef

ParametricTypeRef ::= UpperCaseQID (SingleTypeRef)+

private SingleTypeRef ::=
    UpperPathTypeRef
    | TypeVariableRef
    | RecordType
    | TupleType
    | LEFT_PARENTHESIS TypeRef RIGHT_PARENTHESIS

UpperPathTypeRef ::=
    UpperCaseQID

TypeVariableRef ::=
    LOWER_CASE_IDENTIFIER

RecordType ::=
    LEFT_BRACE [[RecordBase] <<non_empty_list FieldType>>] RIGHT_BRACE

FieldType ::=
    LOWER_CASE_IDENTIFIER COLON TypeRef

TupleType ::=
    Unit
    | LEFT_PARENTHESIS TypeRef (COMMA TypeRef)+ RIGHT_PARENTHESIS


TypeAnnotation ::=
    (LOWER_CASE_IDENTIFIER | OperatorAsFunction_inner) COLON TypeRef
    { pin = 'COLON' }

PortAnnotation ::= PORT LOWER_CASE_IDENTIFIER COLON TypeRef
    { pin = 'COLON' }



// EXPRESSIONS


Expression ::= ListOfOperands (Operator ListOfOperands)*

ListOfOperands ::= ['-']Operand+

Operator ::=
    OPERATOR_IDENTIFIER

OperatorAsFunction ::=
    OperatorAsFunction_inner

private OperatorAsFunction_inner ::=
    LEFT_PARENTHESIS OPERATOR_IDENTIFIER RIGHT_PARENTHESIS

private Operand ::=
    Literal
    | FieldAccess
    | ValueExpr
    | FieldAccessorFunction
    | OperatorAsFunction
    | ParenthesedExpression
    | TupleConstructor
    | Tuple
    | List
    | Record
    | IfElse
    | CaseOf
    | LetIn
    | AnonymousFunction
    | GlslCode

ParenthesedExpression ::= LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS

private Literal ::=
    STRING_LITERAL
    | NUMBER_LITERAL
    | CHAR_LITERAL

AnonymousFunction ::= BACKSLASH Pattern+ ARROW Expression

external FieldAccessorFunction ::= parseFieldAccessorFunction
external Effect ::= parseEffect

external FieldAccess ::= parseFieldAccess
external ValueQID ::= parseValueQID
external UpperCaseQID ::= parseUpperCaseQID

ValueExpr ::=
    ValueQID
    | UpperCaseQID

private Tuple ::=
    Unit
    | NonEmptyTuple

NonEmptyTuple ::=
    LEFT_PARENTHESIS Expression (COMMA Expression)+ RIGHT_PARENTHESIS

TupleConstructor ::=
    LEFT_PARENTHESIS COMMA+ RIGHT_PARENTHESIS

Unit ::=
    LEFT_PARENTHESIS RIGHT_PARENTHESIS

List ::=
    LEFT_SQUARE_BRACKET [<<non_empty_list Expression>>] RIGHT_SQUARE_BRACKET

Record ::=
    LEFT_BRACE [[RecordBase] <<non_empty_list Field>>] RIGHT_BRACE

private RecordBase ::=
    LOWER_CASE_IDENTIFIER PIPE

Field ::=
    LOWER_CASE_IDENTIFIER EQ Expression

IfElse ::=
    IF Expression THEN Expression ELSE Expression
    { pin = 'IF' }


CaseOf ::=
    CASE Expression OF <<non_empty_decls CaseOfBranch>> VIRTUAL_END_SECTION
    { pin = 'CASE' }

CaseOfBranch ::=
    Pattern ARROW Expression
    { pin = 1 }



LetIn ::=
    LET <<non_empty_decls InnerDeclaration>> VIRTUAL_END_SECTION IN Expression
    { pin = 'LET' }

private InnerDeclaration ::=
    InnerValueDeclaration
    | InnerTypeAnnotation

InnerValueDeclaration ::=
    InternalValueDeclarationLeft EQ Expression
    { pin = 'EQ' }

InnerTypeAnnotation ::=
    LOWER_CASE_IDENTIFIER COLON TypeRef
    { pin = 'COLON' }



// PATTERNS


Pattern ::=
    SinglePattern ('::' SinglePattern)* [PatternAs]

PatternAs ::= AS LOWER_CASE_IDENTIFIER

private SinglePattern ::=
    UNDERSCORE
    | LowerPattern
    | UnionPattern
    | TuplePattern
    | Unit
    | ListPattern
    | RecordPattern
    | Literal
    | ParenthesedPattern

LowerPattern ::= LOWER_CASE_IDENTIFIER

RecordPattern ::=
    LEFT_BRACE <<non_empty_list LowerPattern>> RIGHT_BRACE

private ListPattern ::=
    LEFT_SQUARE_BRACKET [<<non_empty_list Pattern>>] RIGHT_SQUARE_BRACKET

UnionPattern ::=
    UpperCaseQID Pattern*

TuplePattern ::=
    LEFT_PARENTHESIS Pattern (COMMA Pattern)+ RIGHT_PARENTHESIS

private ParenthesedPattern ::=
    LEFT_PARENTHESIS Pattern RIGHT_PARENTHESIS



// MISC


OperatorConfig ::=
    OperatorConfigKeyword NUMBER_LITERAL OPERATOR_IDENTIFIER

private OperatorConfigKeyword ::=
    INFIXL
    | INFIX
    | INFIXR

GlslCode ::= START_GLSL_CODE GLSL_CODE_CONTENT* END_GLSL_CODE;



// UTILITY


private meta non_empty_list ::= <<p>> (COMMA <<p>>)*


// TODO [kl] cleanup the duplication
private meta non_empty_decls ::= <<p>> (VIRTUAL_END_DECL <<p>>)*
private meta decls ::= [VIRTUAL_END_DECL? <<p>> (VIRTUAL_END_DECL <<p>>)*]
