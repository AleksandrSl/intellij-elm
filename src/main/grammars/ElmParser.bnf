{
    generate = [ psi = "no" ]
    psiClassPrefix="Elm"
    parserClass="org.elm.lang.core.parser.ElmParser"
    elementTypeHolderClass="org.elm.lang.core.psi.ElmTypes"
    parserUtilClass="org.elm.lang.core.parser.manual.ElmParserUtil"
    elementTypeClass="org.elm.lang.core.psi.ElmElementType"
    tokenTypeClass="org.elm.lang.core.psi.ElmTokenType"

    tokens = [
        // tokens used by manual/external parse rules
        UPPER_CASE_PATH='UPPER_CASE_PATH'
        LOWER_CASE_PATH='LOWER_CASE_PATH'
        MIXED_CASE_PATH='MIXED_CASE_PATH'
        FIELD_ACCESS='FIELD_ACCESS'
        DOT='DOT'
        EFFECT='EFFECT'

        // tokens used by the lexer but not visible to PsiBuilder parser
        // TODO [kl] cleanup the mess of 'comment' tokens
        RESERVED='RESERVED'
        COMMENT='COMMENT'
        COMMENT_CONTENT='COMMENT_CONTENT'
        LINE_COMMENT='LINE_COMMENT'
        START_COMMENT='START_COMMENT'
        START_DOC_COMMENT='START_DOC_COMMENT'
        DOC_COMMENT='DOC_COMMENT'
        END_COMMENT='END_COMMENT'
        NEWLINE='NEWLINE'
        TAB='TAB'
    ]
}

// docs:
// https://github.com/JetBrains/Grammar-Kit
// https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md

elmFile ::= [module_declaration] body
private body ::= import_clauses top_declarations VIRTUAL_END_SECTION?
private import_clauses ::= <<decls import_clause>>
private top_declarations ::= <<decls declaration>>

module_declaration ::= [ effect | PORT ] MODULE upper_case_path [ WHERE record ] EXPOSING exposed_values

private exposed_values ::= LEFT_PARENTHESIS (DOUBLE_DOT | list_of_values) RIGHT_PARENTHESIS

private list_of_values ::= <<non_empty_list exposed_value>>

private exposed_value ::=
    lower_case_id
    | operator_as_function
    | exposed_union
exposed_union ::=
    upper_case_id [exposed_union_constructors]
exposed_union_constructors ::=
    LEFT_PARENTHESIS (DOUBLE_DOT | list_of_union_constructors) RIGHT_PARENTHESIS
private list_of_union_constructors ::=
    <<non_empty_list upper_case_id>>

import_clause ::= IMPORT upper_case_path [as_clause] [exposing_clause]
as_clause ::= AS upper_case_id
exposing_clause ::= EXPOSING exposed_values

private declaration ::=
    value_declaration
    | type_alias_declaration
    | type_declaration
    | type_annotation
    | operator_config
/* TODO [kl] re-enable after the big refactoring (see HaskForce BNF for ideas)
  (previously the recovery relied on FRESH_LINE, which no longer exists)
{
    pin = 1
    recoverWhile = declaration_recover
}
*/

value_declaration ::= value_declaration_left EQ expression

type_alias_declaration ::=
    TYPE ALIAS upper_case_id (lower_case_id)* EQ type_definition
type_definition ::=
    list_of_single_type_definitions (ARROW list_of_single_type_definitions)*
private list_of_single_type_definitions ::=
    upper_case_path (single_type_definition)+
    | single_type_definition
private single_type_definition ::=
    upper_case_path
    | lower_case_id
    | record_type
    | tuple_type
    | LEFT_PARENTHESIS type_definition RIGHT_PARENTHESIS
record_type ::=
    LEFT_BRACE [[record_base] <<non_empty_list field_type>>] RIGHT_BRACE
field_type ::=
    lower_case_id COLON type_definition
tuple_type ::=
    unit
    | LEFT_PARENTHESIS type_definition (COMMA type_definition)+ RIGHT_PARENTHESIS

type_declaration ::=
    TYPE upper_case_id (lower_case_id)* EQ union_member (PIPE union_member)* {
        implements = ["org.elm.lang.core.psi.ext.ElmNameIdentifierOwner"]
        extends = "org.elm.lang.core.psi.ext.ElmNamedElementImpl"
    }
union_member ::=
    upper_case_id single_type_definition*

type_annotation ::= ([PORT] lower_case_id | operator_as_function) COLON type_definition

private value_declaration_left ::=
    internal_value_declaration_left
private internal_value_declaration_left ::=
    function_declaration_left
    | operator_declaration_left
    | pattern
function_declaration_left ::=
    lower_case_id pattern+
operator_declaration_left ::=
    operator_as_function pattern*

expression ::= list_of_operands (operator list_of_operands)*

list_of_operands ::= [MINUS]operand+

private operator ::=
    OPERATOR
    | LIST_CONSTRUCTOR
    | MINUS
    | DOT

private operand ::=
    literal
    | referenced_value
    | field_access
    | operator_as_function
    | parenthesed_expression
    | tuple_constructor
    | tuple
    | list
    | record
    | if_else
    | case_of
    | let_in
    | anonymous_function
    | glsl_code

parenthesed_expression ::= LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

private literal ::=
    STRING_LITERAL
    | NUMBER_LITERAL
    | CHAR_LITERAL

external field_access ::= parseFieldAccess
external effect ::= parseEffect

external upper_case_path ::= parseUpperCasePath upper_case_id
external lower_case_path ::= parseLowerCasePath lower_case_id
external mixed_case_path ::= parseMixedCasePath upper_case_id lower_case_id

private referenced_value ::=
    lower_case_path
    | mixed_case_path

operator_as_function ::=
    LEFT_PARENTHESIS operator RIGHT_PARENTHESIS

private tuple ::=
    unit
    | non_empty_tuple
non_empty_tuple ::=
    LEFT_PARENTHESIS expression (COMMA expression)+ RIGHT_PARENTHESIS
tuple_constructor ::=
    LEFT_PARENTHESIS COMMA+ RIGHT_PARENTHESIS
unit ::=
    LEFT_PARENTHESIS RIGHT_PARENTHESIS

list ::=
    LEFT_SQUARE_BRACKET [<<non_empty_list expression>>] RIGHT_SQUARE_BRACKET

record ::=
    LEFT_BRACE [[record_base] <<non_empty_list field>>] RIGHT_BRACE
private record_base ::=
    lower_case_id PIPE
field ::=
    lower_case_id EQ expression

if_else ::=
    IF expression THEN expression ELSE expression


case_of ::=
    CASE expression OF <<non_empty_decls case_of_branch>> VIRTUAL_END_SECTION
case_of_branch ::=
    pattern ARROW expression


let_in ::=
    LET <<non_empty_decls inner_declaration>> VIRTUAL_END_SECTION IN expression

private inner_declaration ::=
    inner_value_declaration
    | inner_type_annotation
inner_value_declaration ::=
    internal_value_declaration_left EQ expression
inner_type_annotation ::=
    lower_case_id COLON type_definition


// patterns:
pattern ::=
    single_pattern (LIST_CONSTRUCTOR single_pattern)* [AS lower_case_id]
private single_pattern ::=
    UNDERSCORE
    | lower_case_id
    | union_pattern
    | tuple_pattern
    | unit
    | list_pattern
    | record_pattern
    | literal
    | parenthesed_pattern
private record_pattern ::=
    LEFT_BRACE <<non_empty_list lower_case_id>> RIGHT_BRACE
private list_pattern ::=
    LEFT_SQUARE_BRACKET [<<non_empty_list pattern>>] RIGHT_SQUARE_BRACKET
union_pattern ::=
    upper_case_path pattern*
private tuple_pattern ::=
    LEFT_PARENTHESIS pattern (COMMA pattern)+ RIGHT_PARENTHESIS
private parenthesed_pattern ::=
    LEFT_PARENTHESIS pattern RIGHT_PARENTHESIS

anonymous_function ::= BACKSLASH pattern+ ARROW expression

operator_config ::=
    operator_config_keyword NUMBER_LITERAL operator
private operator_config_keyword ::=
    INFIXL
    | INFIX
    | INFIXR

glsl_code ::= START_GLSL_CODE GLSL_CODE_CONTENT* END_GLSL_CODE;


private meta non_empty_list ::= <<p>> (COMMA <<p>>)*

// TODO [kl] try fixing the lexer so that mutiple VIRTUAL_END_DECL are not emitted
// when top-level comments are encountered
private meta non_empty_decls ::= <<p>> (VIRTUAL_END_DECL+ <<p>>)*
private meta decls ::= [VIRTUAL_END_DECL* <<p>> (VIRTUAL_END_DECL+ <<p>>)*]

lower_case_id ::= LOWER_CASE_IDENTIFIER

upper_case_id ::= UPPER_CASE_IDENTIFIER
