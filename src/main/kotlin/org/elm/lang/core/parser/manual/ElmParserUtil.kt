package org.elm.lang.core.parser.manual

import com.intellij.lang.PsiBuilder
import com.intellij.lang.parser.GeneratedParserUtilBase
import org.elm.lang.core.psi.ElmTypes


/**
 * Entry-points for manual/external parse rules to be called by the parser
 * generated by GrammarKit.
 */
class ElmParserUtil : GeneratedParserUtilBase() {
    companion object {

        // case_of_header case_of_branch (case_of_one_or_more_separation case_of_branch)*
        @JvmStatic fun parseCaseOf(builder: PsiBuilder, level: Int, header: Parser, branch: Parser, oneOrMoreSeparations: Parser): Boolean {
            return CaseOfParser(
                    header,
                    branch,
                    oneOrMoreSeparations
            ).parse(builder, level)
        }

        // LET inner_value_declaration other_value_declarations IN expression
        @JvmStatic fun parseLetIn(builder: PsiBuilder, level: Int, innerValueDeclaration: Parser, otherValueDeclarations: Parser, expression: Parser): Boolean {
            return LetInParser(
                    innerValueDeclaration,
                    otherValueDeclarations,
                    expression
            ).parse(builder, level)
        }

        @JvmStatic fun parseUpperCasePath(builder: PsiBuilder, level: Int, upperCaseId: Parser): Boolean {
            return PathParser(
                    ElmTypes.UPPER_CASE_PATH,
                    ElmTypes.UPPER_CASE_IDENTIFIER,
                    null,
                    upperCaseId,
                    null
            ).parse(builder, level)
        }

        @JvmStatic fun parseMixedCasePath(builder: PsiBuilder, level: Int, upperCaseId: Parser, lowerCaseId: Parser): Boolean {
            return PathParser(
                    ElmTypes.MIXED_CASE_PATH,
                    ElmTypes.UPPER_CASE_IDENTIFIER,
                    ElmTypes.LOWER_CASE_IDENTIFIER,
                    upperCaseId,
                    lowerCaseId
            ).parse(builder, level)
        }

        @JvmStatic fun parseLowerCasePath(builder: PsiBuilder, level: Int, lowerCaseId: Parser): Boolean {
            return PathParser(
                    ElmTypes.LOWER_CASE_PATH,
                    ElmTypes.LOWER_CASE_IDENTIFIER, null,
                    lowerCaseId, null
            ).parse(builder, level)
        }

        @JvmStatic fun parseFieldAccess(builder: PsiBuilder, level: Int): Boolean {
            return FieldAccessParser()
                    .parse(builder, level)
        }

        @JvmStatic fun parseEffect(builder: PsiBuilder, level: Int): Boolean {
            return EffectParser()
                    .parse(builder, level)
        }
    }
}
